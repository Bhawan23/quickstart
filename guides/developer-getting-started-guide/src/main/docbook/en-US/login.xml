<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="login">

   <title>CDI + JPA + EJB + JTA + JSF: Login quickstart</title>

   <para>
      This quickstart shows you how to create and deploy an application which persists information to a
      database to JBoss AS 7. Information is displayed using JSF views, business logic is encapsulated 
      in CDI beans, information is persisted using JPA, and transactions can be controlled manually or
      using EJB.
   </para>

   <para>
      Switch to the <literal>quickstarts/login</literal> directory and instruct Maven to build
      and deploy the application:
   </para>

   <programlisting><![CDATA[mvn install]]></programlisting> 

   <para>
      The quickstart uses a Maven plugin to deploy the application. The plugin requires JBoss AS to be
      running (you can find out how to start the server in <xref linkend="install.unix"/> or 
      <xref linkend="install.windows"/>).
   </para> 

   <para>
      or you can start the server using an IDE, like Eclipse.
   </para>

   <para>
      Try logging with the username <literal>demo</literal> and password <literal>demo</literal>.
      Now, click on <literal>Logout</literal> and then on <literal>View Users</literal>. From this
      screen you can add yourself as a user, and then login as this user.
   </para>

   <note>
      <para>
         Should you wish to undeploy the quickstart, or redeploy after making some changes, it's pretty easy:
      </para>
      <itemizedlist>
         <listitem>
            <para>
               <literal>mvn jboss-as:deploy</literal> - deploy any changes to the application to the application server
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>mvn jboss-as:undeploy</literal> - undeploy the example from JBoss AS
            </para>
         </listitem>
      </itemizedlist>
   </note>
   
   <section id="login.eclipse">
      <title>Deploying the Login example using Eclipse</title>
      
      <para>
         You may choose to deploy the example using Eclipse. You'll need to have JBoss AS 7 started in Eclipse (as described
         in <xref linkend="install.eclipse" />) and to have imported the quickstarts into Eclipse (as described in 
         <xref linkend="import.eclipse"/>).         
      </para>
      
      <para>
         With the quickstarts imported, you can deploy the example by right clicking on the <literal>jboss-as-login</literal>
         project, and choosing <literal>Run As -> Run On Server</literal>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Login_Deploy_1.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         Make sure the JBoss AS 7 server is selected, and hit <literal>Finish</literal>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Deploy_2.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         You should see JBoss AS 7 start up (unless you already started it in <xref linkend="install.eclipse" />) and the application deploy in the
         Console log:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Login_Deploy_3.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
   </section>
      
      <para>
      It's time to pull the covers back and dive into the internals of the example application.
   </para>

   <section id="login.indepth">
      <title>The login example in depth</title>
      
      <para>
         In the login example, all users are stored in an H2 database (an in-memory, embedded database provided out of the
         box in JBoss AS 7). Each user is stored as an entity, and entities are mapped to the database using JPA. By 
         default, transactions are managed manually, using the JTA API. Optionally, you can use EJB to manage 
         transactions (we'll look at how to enable that later). We need a transaction in progress in
         order to read and write any entities. 
      </para>
      
      <para>
         The login example is comprised of two JSF views, an entity, and a number of CDI beans. Additionally, there
         are the usual configuration files in <literal>WEB-INF/</literal> (which can be found in the 
         <literal>src/main/webapp</literal> directory of the example). Here we find <literal>beans.xml</literal> and 
         <literal>faces-config.xml</literal> tell JBoss AS 7 to enable CDI and JSF for the application.
         Notice that we don't need a <literal>web.xml</literal>. There are two new configuration files in
         <literal>WEB-INF/classes/META-INF</literal> (which can be found in the <literal>src/main/resources</literal>
         directory of the example) &mdash; <literal>persistence.xml</literal>, which sets up JPA, and 
         <literal>import.sql</literal> which Hibernate, the JPA provider in JBoss AS 7, will use to load the initial 
         users into the application when the application starts.
      </para>
      
      <para>
         <literal>persistence.xml</literal> is pretty straight forward, and links JPA to a datasource:
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="name" coords="5" />
            <area id="datasource" coords="7" />
            <area id="hibernate" coords="9" />
         </areaspec>
         <programlisting language="XML"><![CDATA[<persistence xmlns="http://java.sun.com/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd" 
             version="1.0">
   <persistence-unit name="loginDatabase">
      <provider>org.hibernate.ejb.HibernatePersistence</provider>
      <jta-data-source>java:/H2DS</jta-data-source>
      <properties>
         <property name="hibernate.hbm2ddl.auto" 
                   value="create-drop"/>
      </properties>
   </persistence-unit>
</persistence>]]></programlisting>
         <calloutlist>
            <callout arearefs="name">
               <para>
                  The persistence unit is given a name, so that the application can use multiple if needed. If
                  only one is defined, JPA will automatically use it.
               </para>
            </callout>
            <callout arearefs="datasource">
               <para>
                  The persistence unit references a data source. Here we are using the built in H2 data source.
               </para>
            </callout>
            <callout arearefs="hibernate">
               <para>
                  JPA allows us to configure the JPA provider. Here we tell Hibernate to automatically create any
                  needed tables in H2 is started (and drop them when the application is stopped).
               </para>
            </callout>
         </calloutlist>
</programlistingco>
      
      <para>
         Let's take a look at the JSF views. First up is <literal>template.xhtml</literal>:
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="template" coords="1" />
            <area id="messages" coords="3" />
            <area id="loginForm" coords="6" />
            <area id="buttons" coords="12" />
         </areaspec>
         <programlisting language="XML"><![CDATA[   <ui:composition template="template.xhtml">
    <ui:define name="content">
      <h:messages/>
      <h:form id="loginForm"> 
        <h:panelGrid columns="2" 
                     rendered="#{!login.loggedIn}"> 
          <h:outputLabel for="username">Username:</h:outputLabel> 
          <h:inputText id="username" value="#{credentials.username}"/> 
          <h:outputLabel for="password">Password:</h:outputLabel> 
          <h:inputSecret id="password" value="#{credentials.password}"/> 
        </h:panelGrid> 
        <h:commandButton id="login" 
                         value="Login" 
                         action="#{login.login}" 
                         rendered="#{!login.loggedIn}"/> 
        <h:commandButton id="logout" 
                         value="Logout" 
                         action="#{login.logout}" 
                         rendered="#{login.loggedIn}"/> 
      </h:form> 
      <h:link outcome="/users.xhtml">View users</h:link>
    </ui:define>
  </ui:composition>
]]></programlisting>
         <calloutlist>
            <callout arearefs="template">
               <para>
                  As we have multiple views in this application, we've created a templated that defines the
                  common elements. We'll examine this next. Here we define the "content" section of the page,
                  which will be inserted into the template.
               </para>
            </callout>
            <callout arearefs="messages">
               <para>
                  We output any messages for the user at the top of the form, such as the welcome message
                  when you login.
               </para>
            </callout>
            <callout arearefs="loginForm">
               <para>
                  The login form is only rendered id there is no logged in user. This allows us to prevent
                  someone from logging in twice.
               </para>
            </callout>
            <callout arearefs="buttons">
               <para>
                  Depending on whether the user is logged in or not, we display a log out or log in button.
                  We also display a link to the page which shows the available users.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         Now let's take a look at the template. It defines common elements for the page, and allows pages
         which use it to insert content in various places.
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="head" coords="5" />
            <area id="content" coords="20" />
         </areaspec>
         <programlisting language="XML"><![CDATA[<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <title>Login</title>
  <link href="style/main.css" rel="stylesheet" type="text/css"/>
  <ui:insert name="head"/>
</head>

<body>
  
  <div id="container">
    <div id="header">
  
    </div>

    <div id="sidebar">
    
    </div>
  
    <div id="content">
      <ui:insert name="content"/>
    </div>
    
    <br style="clear:both"/>
  </div>
   
</body>
</html>]]></programlisting>
         <calloutlist>
            <callout arearefs="head">
               <para>
                  The head, defined in case a page wants to add some content to the head of the page.
               </para>
            </callout>
            <callout arearefs="content">
               <para>
                  The content, defined by a page using this template, will be inserted here
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         Finally, let's take a look at the user management page. It uses a table to display all existing users,
         and provides a form to add users
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="table" coords="5" />
            <area id="header" coords="7" />
            <area id="form" coords="26" />
         </areaspec>
         <programlisting language="XML"><![CDATA[<ui:composition template="template.xhtml">
   <ui:define name="content">
      <h:messages />
      <h1>Users</h1>
      <h:dataTable value="#{users}" var="u">
         <h:column>
            <f:facet name="header">
               Username
            </f:facet>
            <h:outputText value="#{u.username}" />
         </h:column>
         <h:column>
            <f:facet name="header">
               Name
            </f:facet>
            <h:outputText value="#{u.name}" />
         </h:column>
         <h:column>
            <f:facet name="header">
               Password
            </f:facet>
            <h:outputText value="#{u.password}" />
         </h:column>
      </h:dataTable>
      <h1>Add user</h1>
      <h:form>
         <table>
            <tr>
               <td>Username</td>
               <td><h:inputText value="#{newUser.username}"/></td>
            </tr>
            <tr>
               <td>Name</td>
               <td><h:inputText value="#{newUser.name}"/></td>
            </tr>
            <tr>
               <td>Password</td>
               <td><h:inputText value="#{newUser.password}"/></td>
            </tr>
            <tr>
               <td></td>
               <td><h:commandButton action="#{userManager.addUser}" value="Add User" /></td>
            </tr>
         </table>
      </h:form>
   </ui:define>
</ui:composition>]]></programlisting>
         <calloutlist>
            <callout arearefs="table">
               <para>
                  The table which displays the current users in the database. The datatable references the 
                  <literal>users</literal>, and iterates over each one. Each user is assigned to the variable 
                  <literal>u</literal>, which we can use when laying out the table struture.
               </para>
            </callout>
            <callout arearefs="header">
               <para>
                  Each column in the table is given a header, plus content.
               </para>
            </callout>
            <callout arearefs="form">
               <para>
                  Finally, we provide a simple form that allows you to add a new user.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         The example has one entity, which is mapped via JPA to the relational database:
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="entity" coords="1" />
            <area id="id" coords="3" />
            <area id="properties" coords="5" />
         </areaspec>
         <programlisting language="XML"><![CDATA[@Entity
public class User {
   @Id
   private String username;
   private String name;
   private String password;

   public String getUsername() {
      return username;
   }

   public void setName(String name) {
      this.name = name;
   }

   public void setUsername(String username) {
      this.username = username;
   }

   public String getName() {
      return name;
   }

   public void setPassword(String password) {
      this.password = password;
   }

   public String getPassword() {
      return password;
   }

   @Override
   public String toString() {
      return "User (username = " + username + ", name = " + name + ")";
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="entity">
               <para>
                  The <literal>@Entity</literal> annotation used on the class tells JPA that this class should
                  be mapped as a table in the database.
               </para>
            </callout>
            <callout arearefs="id">
               <para>
                  Every entity requires an id, the <literal>@Id</literal> annotation placed on a field (or a 
                  JavaBean mutator/accessor) tells JPA that this property is the id. You can use a synthetic id,
                  or a natural id (as we do here). 
               </para>
            </callout>
            <callout arearefs="properties">
               <para>
                  The entity also stores the real name of the user, and their password. As this is Java,
                  every property needs an accessor/mutator!
               </para>
            </callout>
         </calloutlist>
      </programlistingco>

      <para>
         Next up, let's take a look at <literal>Credentials.java</literal>, a data structure used to 
         temporarily hold the credentials the user has entered whilst logging in. 
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="requestscoped" coords="1" />
            <area id="named" coords="2" />
            <area id="properties" coords="5" />
         </areaspec>
         <programlisting language="XML"><![CDATA[@RequestScoped
@Named
public class Credentials {

   private String username;
   private String password;

   public String getUsername() {
      return username;
   }

   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }

   public void setPassword(String password) {
      this.password = password;
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="requestscoped">
               <para>
                  The bean is request scoped, as entered data is naturally scoped to a request.
               </para>
            </callout>
            <callout arearefs="named">
               <para>
                  The bean is given a name, so we can access it from JSF.
               </para>
            </callout>
            <callout arearefs="properties">
               <para>
                  The bean neads to store the username and password entered, and also make them usable
                  via accessors and mutators.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>

      <para>
        The logic allowing a user to log in, and storing who is currently logged in, is encoded in 
        <literal>Login.java</literal>:
      </para>

      <programlistingco>
         <areaspec>
            <area id="sessionscoped" coords="1" />
            <area id="named" coords="2" />
            <area id="credentials" coords="8" />
            <area id="userManager" coords="11" />
            <area id="loginmethod" coords="15" />
            <area id="logout" coords="24" />
            <area id="currentUser" coords="34" />
         </areaspec>
         <programlisting language="XML"><![CDATA[@SessionScoped
@Named
public class Login implements Serializable {

   private static final long serialVersionUID = 7965455427888195913L;

   @Inject
   private Credentials credentials;

   @Inject
   private UserManager userManager;

   private User currentUser;

   public void login() throws Exception {
      User user = userManager.findUser(credentials.getUsername(), credentials.getPassword());
      if (user != null) {
         this.currentUser = user;
         FacesContext.getCurrentInstance().addMessage(null,
               new FacesMessage("Welcome, " + currentUser.getName()));
      }
   }

   public void logout() {
      FacesContext.getCurrentInstance().addMessage(null,
            new FacesMessage("Goodbye, " + currentUser.getName()));
      currentUser = null;
   }

   public boolean isLoggedIn() {
      return currentUser != null;
   }

   @Produces
   @LoggedIn
   public User getCurrentUser() {
      return currentUser;
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="sessionscoped">
               <para>
                  The bean is session scoped, meaning that the currently logged user is kept until the session
                  ends.
               </para>
            </callout>
            <callout arearefs="named">
               <para>
                  The bean is given a name, so we can access it from JSF.
               </para>
            </callout>
            <callout arearefs="credentials">
               <para>
                  We inject the credentials filled in on the web page so we can check them in the <literal>login()</literal>
                  method.
               </para>
            </callout>
            <callout arearefs="userManager">
               <para>
                  We inject the user manager, which takes care of loading and adding users from the database.
               </para>
            </callout>
            <callout arearefs="loginmethod">
               <para>
                  The login method is triggered when the <literal>Login</literal> button is pressed. It asks the
                  <literal>userManager</literal> to find a user with matching username and password, and if a user
                  is found, sets the <literal>currentUser</literal> and displays a message to the user.
               </para>
            </callout>
            <callout arearefs="logout">
               <para>
                  The logout method is triggered when the <literal>Logout</literal> button is pressed. It clears
                  the <literal>currentUser</literal> and displays a message to the user.
               </para>
            </callout>
            <callout arearefs="currentUser">
               <para>
                  The current user is exposed to the application using a producer method, which means that there is
                  no coupling between a class wanting to know the current user, and the <literal>Login</literal> class.
                  The <literal>LoggedIn</literal> qualifier is used to indicate that this <literal>User</literal> is
                  special.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>

      <para>
         Now, let's look at the the most interesting part of the application, how we interact with the database.
         As we mentioned earlier, by default the application uses the JTA API to manually control transactions.
         To implement both approaches, we've defined a <literal>UserManager</literal> interface, with two 
         implementations, one of which (the EJB variant) is as an alternative which can be enabled via a 
         deployment descriptor. Let's first look at the interface, and the manual transaction control variant. 
      </para>

      <programlisting language="JAVA"><![CDATA[public interface UserManager {

   public List<User> getUsers() throws Exception;

   public String addUser() throws Exception;
   
   public User findUser(String username, String password) throws Exception;

   public User getNewUser();

}]]></programlisting>

      <para>
         The methods are fairly self explanatory, so let's move on quickly to the implementation, 
         <literal>ManagedBeanUserManager</literal>:
      </para>
      
            <programlistingco>
         <areaspec>
            <area id="named" coords="1" />
            <area id="requestscoped" coords="2" />
            <area id="logger" coords="6" />
            <area id="em" coords="9" />
            <area id="getUsers" coords="20" />
            <area id="addUser" coords="35" />
            <area id="findUser" coords="51" />
            <area id="newUser" coords="78" />
         </areaspec>
         <programlisting language="JAVA"><![CDATA[@Named("userManager")
@RequestScoped
public class ManagedBeanUserManager implements UserManager {

   @Inject
   private transient Logger logger;

   @Inject
   private EntityManager userDatabase;

   @Inject
   private UserTransaction utx;

   private User newUser = new User();

   @SuppressWarnings("unchecked")
   @Produces
   @Named
   @RequestScoped
   public List<User> getUsers() throws Exception {
      try {
         try {
            utx.begin();
            return userDatabase.createQuery("select u from User u")
                  .getResultList();
         } finally {
            utx.commit();
         }
      } catch (Exception e) {
         utx.rollback();
         throw e;
      }
   }

   public String addUser() throws Exception {
      try {
         try {
            utx.begin();
            userDatabase.persist(newUser);
            logger.info("Added " + newUser);
         } finally {
            utx.commit();
         }
      } catch (Exception e) {
         utx.rollback();
         throw e;
      }
      return "userAdded";
   }

   public User findUser(String username, String password)
         throws Exception {
      try {
         try {
            utx.begin();
            @SuppressWarnings("unchecked")
            List<User> results = userDatabase
                  .createQuery(
                        "select u from User u where u.username=:username and u.password=:password")
                  .setParameter("username", username)
                  .setParameter("password", password).getResultList();
            if (results.isEmpty()) {
               return null;
            } else if (results.size() > 1) {
               throw new IllegalStateException(
                     "Cannot have more than one user with the same username!");
            } else {
               return results.get(0);
            }
         } finally {
            utx.commit();
         }
      } catch (Exception e) {
         utx.rollback();
         throw e;
      }
   }

   @Produces
   @RequestScoped
   @Named
   public User getNewUser() {
      return newUser;
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="named">
               <para>
                  The bean is given a name, so we can access it from JSF.
               </para>
            </callout>
            <callout arearefs="requestscoped">
               <para>
                  The bean is request scoped, meaning that the new user object being added is the same for every
                  invocation of userManager during the request.
               </para>
            </callout>
            <callout arearefs="logger">
               <para>
                  We inject a JDK logger so that we can log when a user is added
               </para>
            </callout>
            <callout arearefs="em">
               <para>
                  We inject the entity manager. This was set up in <literal>persistence.xml</literal>.
               </para>
            </callout>
            <callout arearefs="getUsers">
               <para>
                  We create a named producer method that uses JPA to expose all the users currently in the
                  database. This allows JSF to access this list. We also make this request scoped so that
                  the database isn't hit every time we need to display the users list.
               </para>
            </callout>
            <callout arearefs="addUser">
               <para>
                  <literal>addUser</literal> takes the <literal>newUser</literal> and persists it to the
                  database.
               </para>
            </callout>
            <callout arearefs="findUser">
               <para>
                  The findUser can check whether a user with a matching username and password exists, and
                  return it if it does.
               </para>
            </callout>
            <callout arearefs="newUser">
               <para>
                  The <literal>newUser</literal> is exposed to JSF by using a named producer method.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         You've probably noticed two things as you've read through this. Firstly, that manually managing
         transactions is a real pain. Secondly, you may be wondering how the entity manager and the logger
         are injected. First, let's tidy up the transaction manager, and use EJB to provide us with
         declarative transaction support.
      </para>
      
      <para>
         The class <literal>EJBUserManager</literal> provides this, and is defined as an alternative. Alternatives
         are disabled by default, and when enabled replace the original implementation. In order
         to enable this variant of <literal>UserManager</literal>, edit <literal>beans.xml</literal> and
         uncomment the alternative. Your <literal>beans.xml</literal> should now look like:
      </para>
      
      <programlisting><![CDATA[<beans xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">

      <!-- Uncomment this alternative to see EJB declarative transactions in use -->
      <alternatives>
         <class>org.jboss.as.quickstarts.login.EJBUserManager</class>
      </alternatives>
</beans>]]></programlisting>


         <para>
            Now, let's look at <literal>EJBUserManager</literal>:
         </para>

         <programlisting language="JAVA"><![CDATA[@Named("userManager")
@RequestScoped
@Alternative
@Stateful
public class EJBUserManager implements UserManager {

   @Inject
   private transient Logger logger;

   @Inject
   private EntityManager userDatabase;

   private User newUser = new User();

   @SuppressWarnings("unchecked")
   @Produces
   @Named
   @RequestScoped
   public List<User> getUsers() throws Exception {
      return userDatabase.createQuery("select u from User u").getResultList();
   }

   public String addUser() throws Exception {
      userDatabase.persist(newUser);
      logger.info("Added " + newUser);
      return "userAdded";
   }

   public User findUser(String username, String password) throws Exception {
      @SuppressWarnings("unchecked")
      List<User> results = userDatabase
            .createQuery(
                  "select u from User u where u.username=:username and u.password=:password")
            .setParameter("username", username)
            .setParameter("password", password).getResultList();
      if (results.isEmpty()) {
         return null;
      } else if (results.size() > 1) {
         throw new IllegalStateException(
               "Cannot have more than one user with the same username!");
      } else {
         return results.get(0);
      }
   }

   @Produces
   @RequestScoped
   @Named
   public User getNewUser() {
      return newUser;
   }

}]]></programlisting>

      <para>
         Using declarative transaction management has allowed us to remove a third of the lines of
         code from the class, but more importantly emphasises the functionality of the class. Much better!
      </para>         
      
      <para>
         Finally, let's take a look at the <literal>Resources</literal> class, which provides resources
         such as the entity manager. CDI recommends using "resource producers", as we do in this example,
         to alias resources to CDI beans, allowing for a  consistent style throughout our application:
      </para>

            <programlistingco>
         <areaspec>
            <area id="em" coords="7" />
            <area id="logger" coords="10" />
         </areaspec>
         <programlisting language="JAVA"><![CDATA[public class Resources {

   // Expose an entity manager using the resource producer pattern
   @SuppressWarnings("unused")
   @PersistenceContext
   @Produces
   private EntityManager em;

   @Produces
   Logger getLogger(InjectionPoint ip) {
      String category = ip.getMember().getDeclaringClass().getName();
      return Logger.getLogger(category);
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="em">
               <para>
                  We use the "resource producer" pattern, from CDI, to "alias" the old fashioned 
                  <literal>@PersistenceContext</literal> injection of the entity manager to a CDI
                  style injection. This allows us to use.
               </para>
            </callout>
            <callout arearefs="logger">
               <para>
                  We expose a JDK logger for injection. In order to save a bit more boiler plate, we
                  automatically set the logger category as the class name!
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         That concludes our tour of the login application!
      </para>
      
   </section>
      

</chapter>
