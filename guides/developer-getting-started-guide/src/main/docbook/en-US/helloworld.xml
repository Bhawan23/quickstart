<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="helloworld">

   <title>CDI + Servlet: Helloworld quickstart</title>
   
   <para>
      This quickstart shows you how to deploy a simple servlet to JBoss AS 7. The business logic is 
      encapsulated in a service, which is provided as a CDI bean, and injected into the Servlet.
   </para>

   <para>
      Switch to the <code>quickstarts/helloworld</code> directory and instruct Maven to build
      and deploy the application:
   </para>

   <programlisting><![CDATA[mvn package jboss-as:deploy]]></programlisting> 

   <para>
      The quickstart uses a Maven plugin to deploy the application. The plugin requires JBoss AS to be
      running (you can find out how to start the server in <xref linkend="install.unix"/> or 
      <xref linkend="install.windows"/>).
   </para> 

   <para>
      Now, check if the application has deployed properly by clicking 
      <ulink url="http://localhost:8080/jboss-as-helloworld/HelloWorld">http://localhost:8080/jboss-as-helloworld</ulink>.
      If you see a "Hello World" message it's all working!
   </para>

   <note>
      <para>
         Should you wish to undeploy the quickstart, or redeploy after making some changes, it's pretty easy:
      </para>
      <itemizedlist>
         <listitem>
            <para>
               <code>mvn jboss-as:deploy</code> - deploy any changes to the application to the application server
            </para>
         </listitem>
         <listitem>
            <para>
               <code>mvn jboss-as:undeploy</code> - undeploy the example from JBoss AS
            </para>
         </listitem>
      </itemizedlist>
   </note>
   
   <section id="helloworld.eclipse">
      <title>Deploying the Helloworld example using Eclipse</title>
      
      <para>
         You may choose to deploy the example using Eclipse. You'll need to have JBoss AS 7 started in Eclipse (as described
         in <xref linkend="install.eclipse" />) and to have imported the quickstarts into Eclipse (as described in 
         <xref linkend="import.eclipse"/>).         
      </para>
      
      <para>
         With the quickstarts imported, you can deploy the example by right clicking on the <code>jboss-as-helloworld</code>
         project, and choosing <code>Run As -> Run On Server</code>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Helloworld_Deploy_1.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         Make sure the JBoss AS 7 server is selected, and hit <code>Finish</code>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Deploy_2.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         You should see JBoss AS 7 start up (unless you already started it in <xref linkend="install.eclipse" />) and the application deploy in the
         Console log:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Helloworld_Deploy_3.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
   </section>
   
   <para>
   It's time to pull the covers back and dive into the internals of the example application.
   </para>

   <section id="helloworld.indepth">
      <title>The helloworld example in depth</title>
      
      <para>
         The helloworld is very simple - all it does is print "Hello World" onto a web page.
      </para>
      
      <para>
         The helloworld example is comprised a servlet and a CDI bean. We also include an empty <code>beans.xml</code> file, which tells JBoss AS 7 to look for beans in this
         application and to activate the CDI. <code>beans.xml</code> is located in <code>WEB-INF</code>, which can be found in
          the <code>src/main/webapp</code> directory of the example.
      </para>
      
      <para>
          All the configuration files for this example are located in <code>WEB-INF/</code>, which can be found in
          the <code>src/main/webapp</code> directory of the example.
      </para>
      
      <para>
         Notice that we don't even need a <code>web.xml</code>!
      </para>
      
      <para>
         Let's start by taking a look at the servlet:
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="registration" coords="1" />
            <area id="footerHeader" coords="6" />
            <area id="injection" coords="8" />
            <area id="service" coords="16" />
         </areaspec>
         <programlisting language="JAVA"><![CDATA[@WebServlet("/HelloWorld")
public class HelloWorldServlet extends HttpServlet {

   static String PAGE_HEADER = "<html><head /><body>";

   static String PAGE_FOOTER = "</body></html>";

   @Inject
   HelloService helloService;

   protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
      PrintWriter writer = resp.getWriter();
      writer.println(PAGE_HEADER);
      writer.println("<h1>" + helloService.createHelloMessage("World")
            + "</h1>");
      writer.println(PAGE_FOOTER);
      writer.close();
   }

}]]></programlisting>
         <calloutlist>
            <callout arearefs="registration">
               <para>
                  If you've used Servlet before, then you'll remember having to use xml to register your
                  servlets. Fortunately, this is a thing of the past. Now all you need to do is add the
                  <code>@WebServlet</code> annotation, and provide a mapping to a URL used to access
                  the servlet. Much cleaner!
               </para>
            </callout>
            <callout arearefs="footerHeader">
               <para>
                  Every web page needs to be correctly formed HTML. We've created static Strings to hold
                  the minimum header and footer to write out.
               </para>
            </callout>
            <callout arearefs="injection">
               <para>
                  We inject the HelloService (a CDI bean) which generates the actual message. This allows
                  to alter the implementation of HelloService at a later date without changing the view
                  layer at all (assuming we don't alter the API of HelloService).
               </para>
            </callout>
            <callout arearefs="service">
               <para>
                  We call into the service to generate the message "Hello World", and write it out to
                  the Http request.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         Now we understand how the information is sent to the browser, let's take a look at the service.
      </para>
      
      <programlisting language="JAVA"><![CDATA[public class HelloService {

   String createHelloMessage(String name) {
      return "Hello " + name + "!";
   }

}
]]></programlisting>

      <para>
         The service is very simple - no registration (XML or annotation) is required!
      </para>
      
   </section>
      

</chapter>
