<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="numberguess">

   <title>CDI + JSF: Numberguess quickstart</title>

   <para>
      This quickstart shows you how to create and deploy a simple application to JBoss AS 7; the application does
      not persist any information. Information is displayed using a JSF view, and business logic is 
      encapsulated in two CDI beans.
   </para>

   <para>
      Switch to the <literal>quickstarts/numberguess</literal> directory and instruct Maven to build
      and deploy the application:
   </para>

   <programlisting><![CDATA[mvn install]]></programlisting> 

   <para>
      The quickstart uses a Maven plugin to deploy the application. The plugin requires JBoss AS to be
      running (you can find out how to start the server in <xref linkend="install.unix"/> or 
      <xref linkend="install.windows"/>).
   </para> 

   <para>
      or you can start the server using an IDE, like Eclipse.
   </para>

   <para>
      Now, see if you can determine the most efficient approach to pinpoint the random number at the URL 
      <ulink url="http://localhost:8080/jboss-as-numberguess">http://localhost:8080/jboss-as-numberguess</ulink>.
   </para>

   <note>
      <para>
         Should you wish to undeploy the quickstart, or redeploy after making some changes, it's pretty easy:
      </para>
      <itemizedlist>
         <listitem>
            <para>
               <literal>mvn jboss-as-deploy:redeploy</literal> - deploy any changes to the application to the application server
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>mvn jboss-as-deploy:undeploy</literal> - undeploy the example from JBoss AS
            </para>
         </listitem>
      </itemizedlist>
   </note>
   
      <section id="numberguess.eclipse">
      <title>Deploying the Numberguess example using Eclipse</title>
      
      <para>
         You may choose to deploy the example using Eclipse. You'll need to have JBoss AS 7 started in Eclipse (as described
         in <xref linkend="install.eclipse" />) and to have imported the quickstarts into Eclipse (as described in 
         <xref linkend="import.eclipse"/>).         
      </para>
      
      <para>
         With the quickstarts imported, you can deploy the example by right clicking on the <literal>jboss-as-numberguess</literal>
         project, and choosing <literal>Run As -> Run On Server</literal>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Numberguess_Deploy_1.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         Make sure the JBoss AS 7 server is selected, and hit <literal>Finish</literal>:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Deploy_2.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
      <para>
         You should see JBoss AS 7 start up (unless you already started it in <xref linkend="install.eclipse" />) and the application deploy in the
         Console log:
      </para>
      
      <mediaobject>
         <imageobject>
            <imagedata fileref="images/Eclipse_Numberguess_Deploy_3.jpg"
               format="JPEG" />
         </imageobject>
      </mediaobject>
      
   </section>
   
   <para>
      It's time to pull the covers back and dive into the internals of the example application.
   </para>

   <section id="numberguess.indepth">
      <title>The numberguess example in depth</title>
      
      <para>
         In the numberguess application you get 10 attempts to guess a number between 1 and 100. After each
         attempt, you're told whether your guess was too high or too low.
      </para>
      
      <para>
         The numberguess example is comprised of a number of beans, configuration files and Facelets (JSF) views,
         packaged as a war module. Let's start by examining the configuration files.
      </para>
      
      <para>
          All the configuration files for this example are located in <literal>WEB-INF/</literal>, which can be found in
          the <literal>src/main/webapp</literal> directory of the example. First, we have the JSF 2.0 version of
          <literal>faces-config.xml</literal>. A standardized version of Facelets is the default view handler in JSF
          2.0, so there's really nothing that we have to configure. We just have to include this file in order to tell JBoss AS 7
          that this application uses JSF. Thus, the configuration consists of only the root element.
      </para>
      
      <programlisting role="XML"><![CDATA[<faces-config version="2.0"
   xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd">
</faces-config>]]></programlisting>

      <para>
         There's also an empty <literal>beans.xml</literal> file, which tells JBoss AS 7 to look for beans in this
         application and to activate the CDI.
      </para>
      
      <para>
         Notice that we don't even need a <literal>web.xml</literal>!
      </para>
      
      <para>
         Let's take a look at the main JSF view, <literal>src/main/webapp/home.xhtml</literal>.
      </para>
      
      <programlistingco>
         <areaspec>
            <area id="statusMessages" coords="19" />
            <area id="instructions" coords="28" />
            <area id="guess" coords="38" />
            <area id="validator" coords="41" />
            <area id="submit" coords="42" />
         </areaspec>
         <programlisting role="XML"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
   xmlns:ui="http://java.sun.com/jsf/facelets"
   xmlns:h="http://java.sun.com/jsf/html"
   xmlns:f="http://java.sun.com/jsf/core">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Numberguess</title>
<link href="style/main.css" rel="stylesheet" type="text/css" />
</head>

<body>
   <div id="content">
      <h1>Guess a number...</h1>
      <h:form id="numberGuess">

         <!-- Feedback for the user on their guess -->
         <div style="color: red">
            <h:messages id="messages" globalOnly="false" />
            <h:outputText id="Higher" value="Higher!"
               rendered="#{game.number gt game.guess and game.guess ne 0}" />
            <h:outputText id="Lower" value="Lower!"
               rendered="#{game.number lt game.guess and game.guess ne 0}" />
         </div>

         <!-- Instructions for the user -->
         <div>
            I'm thinking of a number between <span id="numberGuess:smallest">#{game.smallest}</span>
            and <span id="numberGuess:biggest">#{game.biggest}</span>. You have
            #{game.remainingGuesses} guesses remaining.
         </div>
   
         <!-- Input box for the users guess, plus a button to submit, and reset -->
         <!-- These are bound using EL to our CDI beans -->
         <div>
            Your guess:
            <h:inputText id="inputGuess" value="#{game.guess}" required="true"
               size="3" disabled="#{game.number eq game.guess}"
               validator="#{game.validateNumberRange}" />
            <h:commandButton id="guessButton" value="Guess"
               action="#{game.check}" disabled="#{game.number eq game.guess}" />
         </div>
         <div>
            <h:commandButton id="restartButton" value="Reset"
               action="#{game.reset}" immediate="true" />
         </div>
      </h:form>

   </div>

   <br style="clear: both" />

</body>
</html>
]]></programlisting>
         <calloutlist>
            <callout arearefs="statusMessages">
               <para>
                  There are a number of messages which can be sent to the user,
                  "Higher!", "Lower!" and "Correct!"
               </para>
            </callout>
            <callout arearefs="instructions">
               <para>
                  As the user guesses, the range of numbers they can guess gets
                  smaller - this sentence changes to make sure they know the
                  number range of a valid guess.
               </para>
            </callout>
            <callout arearefs="guess">
               <para>
                  This input field is bound to a bean property using a value
                  expression.
               </para>
            </callout>
            <callout arearefs="validator">
               <para>
                  A validator binding is used to make sure the user doesn't
                  accidentally input a number outside of the range in which they
                  can guess - if the validator wasn't here, the user might use
                  up a guess on an out of bounds number.
               </para>
            </callout>
            <callout arearefs="submit">
               <para>
                  And, of course, there must be a way for the user to send their
                  guess to the server. Here we bind to an action method on the bean.
               </para>
            </callout>
         </calloutlist>
      </programlistingco>
      
      <para>
         The example exists of 4 classes, the first two of which are qualifiers.  First, there is the
         <literal>@Random</literal> qualifier, used for injecting a random number:
      </para>
      
      <programlisting role="JAVA"><![CDATA[@Qualifier
@Target( { TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
public @interface Random {}]]></programlisting>

      <para>
         There is also the <literal>@MaxNumber</literal> qualifier, used for
         injecting the maximum number that can be injected:
      </para>
      
      <programlisting role="JAVA"><![CDATA[@Qualifier
@Target( { TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
public @interface MaxNumber {}
]]></programlisting>

      <para>
         The application-scoped <literal>Generator</literal> class is responsible for creating the random number, via a
         producer method. It also exposes the maximum possible number via a producer method:
      </para>

      <programlisting role="JAVA"><![CDATA[@ApplicationScoped
public class Generator implements Serializable {

   private java.util.Random random = new java.util.Random(System.currentTimeMillis());
   
   private int maxNumber = 100;
   
   java.util.Random getRandom() {
      return random;
   }
   
   @Produces @Random int next() { 
      return getRandom().nextInt(maxNumber); 
   }
   
   @Produces @MaxNumber int getMaxNumber() {
      return maxNumber;
   }

}]]></programlisting>

      <para>
         The <literal>Generator</literal> is application scoped, so we don't get a different random each time.
      </para>

      <note>
         <para>
            The package declaration and imports have been excluded from these listings. The complete listing is
            available in the example source code.
         </para>
      </note>
      
      <para>
         The final bean in the application is the session-scoped <literal>Game</literal> class. This is the primary
         entry point of the application. It's responsible for setting up or resetting the game, capturing and validating
         the user's guess and providing feedback to the user with a <literal>FacesMessage</literal>. We've used the
         post-construct lifecycle method to initialize the game by retrieving a random number from the <literal>@Random
         Instance&lt;Integer&gt;</literal> bean.
      </para>

      <para>
         You'll notice that we've also added the <literal>@Named</literal> annotation to this class. This annotation is
         only required when you want to make the bean accessible to a JSF view via EL (i.e., #{game}).
      </para>
         
      <programlisting role="JAVA"><![CDATA[@Named
@SessionScoped
public class Game implements Serializable {

   private int number;
   private int guess;
   private int smallest;
   private int biggest;
   private int remainingGuesses;

   @Inject @MaxNumber private int maxNumber;
   @Inject @Random Instance<Integer> randomNumber;
   
   public Game() {}
   
   public void check() {
      if (guess > number) {
         biggest = guess - 1;
      }
      else if (guess < number) {
         smallest = guess + 1;
      }
      else if (guess == number) {
         FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Correct!"));
      }
      remainingGuesses--;
   }
   
   @PostConstruct
   public void reset() {
      this.smallest = 0;
      this.guess = 0;
      this.remainingGuesses = 10;
      this.biggest = maxNumber;
      this.number = randomNumber.get();
   }
   
   public void validateNumberRange(FacesContext context,  UIComponent toValidate, Object value) {
      if (remainingGuesses <= 0) {
         FacesMessage message = new FacesMessage("No guesses left!");
         context.addMessage(toValidate.getClientId(context), message);
         ((UIInput) toValidate).setValid(false);
         return;
      }
      int input = (Integer) value;

      if (input < smallest || input > biggest) {
         ((UIInput) toValidate).setValid(false);

         FacesMessage message = new FacesMessage("Invalid guess");
         context.addMessage(toValidate.getClientId(context), message);
      }
   }

   public int getNumber() {
      return number;
   }
   
   public int getGuess() {
      return guess;
   }
   
   public void setGuess(int guess) {
      this.guess = guess;
   }
   
   public int getSmallest() {
      return smallest;
   }
   
   public int getBiggest() {
      return biggest;
   }
   
   public int getRemainingGuesses() {
      return remainingGuesses;
   }

}]]></programlisting>
   </section>
      

</chapter>
